openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
  contact:
    email: brizollajr@gmail.com
  version: 1.0.0
servers:
  - url: https://localhost:3000/
tags:
  - name: speakers
    description: Everything about Speakers
paths:
  /speakers:
    get:
      tags:
        - speakers
      summary: List one or more speakers
      description: Return list of Speakers
      operationId: listAll
      parameters:
      - in: query
        name: speakerId
        description: ID of speaker order that needs to be deleted
        schema:
          type: string
          format: guid
      - in: query
        name: nickname
        description: ID of speaker order that needs to be deleted
        schema:
          type: string    
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    _id:
                      type: string
                      format: guid
                      example: aeb9b96e-63d9-4bf9-8a37-9d954571e444
                    nickname:
                      type: string
                      example: Juninho
        '400':
          description:  unsuccessful operation
    post:
      tags:
        - speakers
      summary: Insert one Speaker
      description: Insert one Speaker
      operationId: insert
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                nickname: Juninho
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  _id:
                    type: string
                    format: guid
                    example: aeb9b96e-63d9-4bf9-8a37-9d954571e444
                  nickname:
                    type: string
                    example: Juninho
                
  /speakers/{speakerId}/:
    delete:
      tags:
        - speakers
      summary: Delete one speaker by Id
      description: Delete speaker by Id
      operationId: delete
      parameters:
        - name: speakerId
          in: path
          description: ID of speaker order that needs to be deleted
          required: true
          schema:
            type: string
            format: guid
      responses:
        '204':
          description: Delete with succesful doesnt return any response
        '400':
          description: Any other error of the user
    put:
      tags:
        - speakers
      summary: Update one speaker by id
      description: Update one speaker by id
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                nickname: Juninho
      parameters:
        - name: speakerId
          in: path
          description: ID of the speaker that needs to be updated
          required: true
          schema:
            type: string
            format: guid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  _id:
                    type: string
                    format: guid
                    example: aeb9b96e-63d9-4bf9-8a37-9d954571e444
                  nickname:
                    type: string
                    example: Juninho    
        '400':
          description: any other error of the user
components:
  schemas:
    Speakers:
      type: array
      items:
        properties:
          _id:
            type: string
            format: guid
            example: aeb9b96e-63d9-4bf9-8a37-9d954571e444
          nickname:
            type: string
            example: Juninho
    
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Speaker:
      description: Speaker object containing only nickname
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 10
            
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'